# -*- coding: utf-8 -*-

import simple_draw as sd
from simple_draw import Vector


def traingle(figura=3, x=300, y=300, angle=0, lenght=100):
    figura_angle = {3: 120, 4: 90, 5: 72, 6: 60}
    point = sd.get_point(x, y)
    color_figura = (255, 0, 255)
    figura_width = 1
    if 3 <= figura <= 6:
        vector_start = sd.get_vector(start_point=point, angle=figura_angle[figura] + angle, length=0,
                                     width=figura_width)
        for i in range(1, figura):
            vector = sd.get_vector(start_point=vector_start.end_point, angle=figura_angle[figura] * i + angle,
                                   length=lenght, width=figura_width)
            vector.draw(color=color_figura)
            vector_start = vector
        sd.line(start_point=vector.end_point, end_point=point, color=color_figura, width=figura_width)
    else:
        print('некорректный выбор фигуры')

    # v2 = sd.get_vector(start_point=v1.end_point, angle=angle + 120, length=200, width=2)
    # v2.draw(color=(255, 255, 0))
    #
    # v3 = sd.get_vector(start_point=v2.end_point, angle=angle + 240, length=200, width=2)
    # v3.draw(color=(255, 255, 0))


# Часть 1.
# Написать функции рисования равносторонних геометрических фигур:
# - треугольника
# - квадрата
# - пятиугольника
# - шестиугольника
# Все функции должны принимать 3 параметра:
# - точка начала рисования
# - угол наклона
# - длина стороны
#
# Использование копи-пасты - обязательно! Даже тем кто уже знает про её пагубность. Для тренировки.
# Как работает копипаста:
#   - одну функцию написали,
#   - копипастим её, меняем название, чуть подправляем код,
#   - копипастим её, меняем название, чуть подправляем код,
#   - и так далее.
# В итоге должен получиться ПОЧТИ одинаковый код в каждой функции

# Пригодятся функции
# sd.get_point()
# sd.get_vector()
# sd.line()
# Результат решения см lesson_004/results/exercise_01_shapes.jpg


sd.set_screen_size(1920,1080)
print("Пивет! \nНачнем рисовать фигуры")
# figura = input('Введи число углов фигуры =')
# x = input('Введи координату X =')
# y = input('Введи координату Y =')
# angle = input('Введи угол поворота фигуры =')
# lenght = input('Введи длину стороны фигуры =')
# figura,x,y,angle,lenght = int(figura),int(x),int(y),int(angle),int(lenght)
# color = input('Выбери цвет фигуры\n 0-')
# traingle(figura,x,y,angle,lenght)
traingle(3,200,300,25,50)
traingle(4,500,300,10,100)
traingle(5,600,800,5,150)
traingle(6,1500,200,0,300)

# Часть 1-бис.
# Попробуйте прикинуть обьем работы, если нужно будет внести изменения в этот код.
# Скажем, связывать точки не линиями, а дугами. Или двойными линиями. Или рисовать круги в угловых точках. Или...
# А если таких функций не 4, а 44?
#
# Часть 2 (делается после зачета первой части)
#
# Надо сформировать функцию, параметризированную в местах где была "небольшая правка".
# Это называется "Выделить общую часть алгоритма в отдельную функцию"
# Потом надо изменить функции рисования конкретных фигур - вызывать общую функцию вместо "почти" одинакового кода.
#
# В итоге должно получиться:
#   - одна общая функция со множеством параметров,
#   - все функции отрисовки треугольника/квадрата/етс берут 3 параметра и внутри себя ВЫЗЫВАЮТ общую функцию.
#
# Не забудте в этой общей функции придумать, как устранить разрыв
#   в начальной/конечной точках рисуемой фигуры (если он есть)

# Часть 2-бис.
# А теперь - сколько надо работы что бы внести изменения в код? Выгода на лицо :)
# Поэтому среди программистов есть принцип D.R.Y. https://clck.ru/GEsA9
# Будьте ленивыми, не используйте копи-пасту!


sd.pause()
